generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Company {
  id            Int       @id @default(autoincrement())
  name          String    @db.VarChar(255)
  address       String?
  contact_email String?   @db.VarChar(255)
  contact_phone String?   @db.VarChar(50)
  created_at    DateTime? @default(now()) @db.Timestamp(6)
  users         users[]

  @@map("companies")
}

model activity_logs {
  id         Int       @id @default(autoincrement())
  user_id    Int?
  action     String?
  details    String?
  created_at DateTime? @default(now()) @db.Timestamp(6)
}

model clients {
  id               Int      @id @default(autoincrement())
  name             String
  contact_email    String?
  contact_phone    String?
  activity_status  String?  @default("active")
  purchase_history String?
  credit_rating    Int?     @default(0)
  orders           orders[]
}

model finances {
  id                 Int      @id @default(autoincrement())
  transaction_date   DateTime @db.Timestamp(6)
  type               String
  category           String?
  account            String?
  amount             Decimal? @db.Decimal(15, 2)
  description        String?
  responsible_person String?
}

model kpis {
  id             Int      @id @default(autoincrement())
  category       String
  name           String
  target_value   Decimal? @db.Decimal(15, 2)
  actual_value   Decimal? @db.Decimal(15, 2)
  forecast_value Decimal? @db.Decimal(15, 2)
  status         String?  @default("not_started")
}

model order_items {
  id         Int       @id @default(autoincrement())
  order_id   Int?
  product_id Int?
  quantity   Int
  price      Decimal   @db.Decimal(15, 2)
  orders     orders?   @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  products   products? @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model orders {
  id              Int           @id @default(autoincrement())
  client_id       Int?
  order_date      DateTime      @db.Timestamp(6)
  status          String?       @default("created")
  payment_method  String?
  delivery_method String?
  total_amount    Decimal?      @db.Decimal(15, 2)
  order_items     order_items[]
  clients         clients?      @relation(fields: [client_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model products {
  id                  Int           @id @default(autoincrement())
  sku                 String        @unique
  name                String
  category            String?
  supplier            String?
  price               Decimal?      @db.Decimal(15, 2)
  stock               Int?          @default(0)
  availability_status String?       @default("in_stock")
  order_items         order_items[]
}

model reports {
  id            Int       @id @default(autoincrement())
  report_name   String
  generated_at  DateTime? @default(now()) @db.Timestamp(6)
  format        String?   @default("pdf")
  related_tasks String?
  manager_id    Int?
  users         users?    @relation(fields: [manager_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model settings {
  id    Int     @id @default(autoincrement())
  key   String  @unique
  value String?
}

model users {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(255)
  login      String    @unique @db.VarChar(100)
  password   String    @db.VarChar(255)
  company_id Int?
  role       String?   @default("user") @db.VarChar(50)
  status     String?   @default("active") @db.VarChar(20)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  reports    reports[]
  companies  Company?  @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
